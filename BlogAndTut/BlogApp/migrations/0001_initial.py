# Generated by Django 3.0.7 on 2020-09-12 07:38

import ckeditor.fields
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import taggit.managers


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('taggit', '0003_taggeditem_add_unique_index'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='BlogPost1',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=256)),
                ('slug', models.SlugField(max_length=264, unique_for_date='publish')),
                ('body', ckeditor.fields.RichTextField(blank=True, null=True)),
                ('publish', models.DateTimeField(default=django.utils.timezone.now)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('update', models.DateTimeField(auto_now=True)),
                ('TotalView', models.IntegerField(default=0)),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('published', 'Published')], default='draft', max_length=10)),
                ('Dis_Likes', models.ManyToManyField(blank=True, default=[0], related_name='unliked', to=settings.AUTH_USER_MODEL)),
                ('Likes', models.ManyToManyField(blank=True, default=[0], related_name='liked', to=settings.AUTH_USER_MODEL)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='blog_post', to=settings.AUTH_USER_MODEL)),
                ('tags', taggit.managers.TaggableManager(help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
            ],
            options={
                'ordering': ('-publish',),
            },
        ),
        migrations.CreateModel(
            name='Comment_Related_To_Problem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=256)),
                ('email', models.EmailField(max_length=254)),
                ('body', models.TextField(verbose_name='')),
                ('created', models.DateTimeField(auto_now=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('active', models.BooleanField(default=True)),
            ],
            options={
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='OffCampusRecruitment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=500)),
                ('adminName', models.CharField(default='Yuvraj', max_length=20)),
                ('job_created', models.DateTimeField(auto_now=True)),
                ('job_updated', models.DateTimeField(auto_now=True)),
                ('description', ckeditor.fields.RichTextField(blank=True, null=True)),
                ('open', models.BooleanField(default=True)),
                ('totalView', models.IntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='RequestForCode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user', models.CharField(max_length=255)),
                ('email', models.EmailField(max_length=254)),
                ('Message', models.CharField(max_length=255)),
                ('ProblemStatement', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='ProblemStatement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=256)),
                ('slug', models.SlugField(max_length=264, unique_for_date='publish')),
                ('problemDescription', ckeditor.fields.RichTextField(blank=True, null=True)),
                ('publish', models.DateTimeField(default=django.utils.timezone.now)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('update', models.DateTimeField(auto_now=True)),
                ('TotalViewForProbelm', models.IntegerField(default=0)),
                ('Dis_LikesForProbelm', models.ManyToManyField(blank=True, default=[0], related_name='unliked_for_probelms', to=settings.AUTH_USER_MODEL)),
                ('LikesForProbelm', models.ManyToManyField(blank=True, default=[0], related_name='liked_for_probelms', to=settings.AUTH_USER_MODEL)),
                ('coder', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='problems', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('-publish',),
            },
        ),
        migrations.CreateModel(
            name='DiscussionForum',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reply', models.TextField(verbose_name='')),
                ('reply_created', models.DateTimeField(auto_now=True)),
                ('reply_updated', models.DateTimeField(auto_now=True)),
                ('reply_active', models.BooleanField(default=True)),
                ('replyer_name', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='replyer', to=settings.AUTH_USER_MODEL)),
                ('replyto', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Reply', to='BlogApp.Comment_Related_To_Problem')),
            ],
            options={
                'ordering': ('-reply_created',),
            },
        ),
        migrations.AddField(
            model_name='comment_related_to_problem',
            name='question',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ProblemComment', to='BlogApp.ProblemStatement'),
        ),
        migrations.AddField(
            model_name='comment_related_to_problem',
            name='reply',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='replies', to='BlogApp.Comment_Related_To_Problem'),
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=256)),
                ('email', models.EmailField(max_length=254)),
                ('body', models.TextField(verbose_name='')),
                ('created', models.DateTimeField(auto_now=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('active', models.BooleanField(default=True)),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='BlogApp.BlogPost1')),
            ],
            options={
                'ordering': ('-created',),
            },
        ),
    ]
